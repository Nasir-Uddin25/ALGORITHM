The Dijkstra's Algorithm is a popular graph traversal algorithm used to find the shortest path from a single source vertex to all other vertices in a weighted graph. Unlike the Bellman-Ford algorithm, Dijkstra's algorithm does not work with graphs that have negative edge weights. It is based on a greedy approach, where it always selects the vertex with the smallest tentative distance at each step.

Key Features:
Works for graphs with non-negative edge weights: Dijkstra's algorithm assumes that all edge weights are non-negative.

Greedy approach: It selects the vertex with the smallest distance at each step and relaxes its neighbors.

Efficient for sparse graphs: When implemented with a priority queue (e.g., a min-heap), it is efficient for graphs with fewer edges.

Algorithm Steps:
Initialization:

Set the distance to the source vertex as 0.

Set the distance to all other vertices as âˆž (infinity).

Create a priority queue (min-heap) to store vertices based on their tentative distances.

Main Loop:

Extract the vertex u with the smallest distance from the priority queue.

For each neighbor v of u, relax the edge:

if distance
[
u
]
+
w
(
u
,
v
)
<
distance
[
v
]
,
 then update distance
[
v
]
=
distance
[
u
]
+
w
(
u
,
v
)
if distance[u]+w(u,v)<distance[v], then update distance[v]=distance[u]+w(u,v)
Insert the updated vertex v back into the priority queue.

Termination:

The algorithm terminates when the priority queue is empty. At this point, the shortest distances to all vertices have been computed.